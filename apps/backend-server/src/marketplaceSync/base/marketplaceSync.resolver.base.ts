/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketplaceSync } from "./MarketplaceSync";
import { MarketplaceSyncCountArgs } from "./MarketplaceSyncCountArgs";
import { MarketplaceSyncFindManyArgs } from "./MarketplaceSyncFindManyArgs";
import { MarketplaceSyncFindUniqueArgs } from "./MarketplaceSyncFindUniqueArgs";
import { CreateMarketplaceSyncArgs } from "./CreateMarketplaceSyncArgs";
import { UpdateMarketplaceSyncArgs } from "./UpdateMarketplaceSyncArgs";
import { DeleteMarketplaceSyncArgs } from "./DeleteMarketplaceSyncArgs";
import { Marketplace } from "../../marketplace/base/Marketplace";
import { Product } from "../../product/base/Product";
import { MarketplaceSyncService } from "../marketplaceSync.service";
@graphql.Resolver(() => MarketplaceSync)
export class MarketplaceSyncResolverBase {
  constructor(protected readonly service: MarketplaceSyncService) {}

  async _marketplaceSyncsMeta(
    @graphql.Args() args: MarketplaceSyncCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketplaceSync])
  async marketplaceSyncs(
    @graphql.Args() args: MarketplaceSyncFindManyArgs
  ): Promise<MarketplaceSync[]> {
    return this.service.marketplaceSyncs(args);
  }

  @graphql.Query(() => MarketplaceSync, { nullable: true })
  async marketplaceSync(
    @graphql.Args() args: MarketplaceSyncFindUniqueArgs
  ): Promise<MarketplaceSync | null> {
    const result = await this.service.marketplaceSync(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketplaceSync)
  async createMarketplaceSync(
    @graphql.Args() args: CreateMarketplaceSyncArgs
  ): Promise<MarketplaceSync> {
    return await this.service.createMarketplaceSync({
      ...args,
      data: {
        ...args.data,

        marketplace: args.data.marketplace
          ? {
              connect: args.data.marketplace,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MarketplaceSync)
  async updateMarketplaceSync(
    @graphql.Args() args: UpdateMarketplaceSyncArgs
  ): Promise<MarketplaceSync | null> {
    try {
      return await this.service.updateMarketplaceSync({
        ...args,
        data: {
          ...args.data,

          marketplace: args.data.marketplace
            ? {
                connect: args.data.marketplace,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketplaceSync)
  async deleteMarketplaceSync(
    @graphql.Args() args: DeleteMarketplaceSyncArgs
  ): Promise<MarketplaceSync | null> {
    try {
      return await this.service.deleteMarketplaceSync(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Marketplace, {
    nullable: true,
    name: "marketplace",
  })
  async getMarketplace(
    @graphql.Parent() parent: MarketplaceSync
  ): Promise<Marketplace | null> {
    const result = await this.service.getMarketplace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: MarketplaceSync
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
