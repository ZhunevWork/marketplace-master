/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OfferCard as PrismaOfferCard,
  Product as PrismaProduct,
} from "@prisma/client";

export class OfferCardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OfferCardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.offerCard.count(args);
  }

  async offerCards(
    args: Prisma.OfferCardFindManyArgs
  ): Promise<PrismaOfferCard[]> {
    return this.prisma.offerCard.findMany(args);
  }
  async offerCard(
    args: Prisma.OfferCardFindUniqueArgs
  ): Promise<PrismaOfferCard | null> {
    return this.prisma.offerCard.findUnique(args);
  }
  async createOfferCard(
    args: Prisma.OfferCardCreateArgs
  ): Promise<PrismaOfferCard> {
    return this.prisma.offerCard.create(args);
  }
  async updateOfferCard(
    args: Prisma.OfferCardUpdateArgs
  ): Promise<PrismaOfferCard> {
    return this.prisma.offerCard.update(args);
  }
  async deleteOfferCard(
    args: Prisma.OfferCardDeleteArgs
  ): Promise<PrismaOfferCard> {
    return this.prisma.offerCard.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.offerCard
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
