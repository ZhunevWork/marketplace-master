/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MarketplaceSync as PrismaMarketplaceSync,
  Marketplace as PrismaMarketplace,
  Product as PrismaProduct,
} from "@prisma/client";

export class MarketplaceSyncServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MarketplaceSyncCountArgs, "select">
  ): Promise<number> {
    return this.prisma.marketplaceSync.count(args);
  }

  async marketplaceSyncs(
    args: Prisma.MarketplaceSyncFindManyArgs
  ): Promise<PrismaMarketplaceSync[]> {
    return this.prisma.marketplaceSync.findMany(args);
  }
  async marketplaceSync(
    args: Prisma.MarketplaceSyncFindUniqueArgs
  ): Promise<PrismaMarketplaceSync | null> {
    return this.prisma.marketplaceSync.findUnique(args);
  }
  async createMarketplaceSync(
    args: Prisma.MarketplaceSyncCreateArgs
  ): Promise<PrismaMarketplaceSync> {
    return this.prisma.marketplaceSync.create(args);
  }
  async updateMarketplaceSync(
    args: Prisma.MarketplaceSyncUpdateArgs
  ): Promise<PrismaMarketplaceSync> {
    return this.prisma.marketplaceSync.update(args);
  }
  async deleteMarketplaceSync(
    args: Prisma.MarketplaceSyncDeleteArgs
  ): Promise<PrismaMarketplaceSync> {
    return this.prisma.marketplaceSync.delete(args);
  }

  async getMarketplace(parentId: string): Promise<PrismaMarketplace | null> {
    return this.prisma.marketplaceSync
      .findUnique({
        where: { id: parentId },
      })
      .marketplace();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.marketplaceSync
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
