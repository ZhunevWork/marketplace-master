/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketplaceSyncService } from "../marketplaceSync.service";
import { MarketplaceSyncCreateInput } from "./MarketplaceSyncCreateInput";
import { MarketplaceSync } from "./MarketplaceSync";
import { MarketplaceSyncFindManyArgs } from "./MarketplaceSyncFindManyArgs";
import { MarketplaceSyncWhereUniqueInput } from "./MarketplaceSyncWhereUniqueInput";
import { MarketplaceSyncUpdateInput } from "./MarketplaceSyncUpdateInput";

export class MarketplaceSyncControllerBase {
  constructor(protected readonly service: MarketplaceSyncService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketplaceSync })
  async createMarketplaceSync(
    @common.Body() data: MarketplaceSyncCreateInput
  ): Promise<MarketplaceSync> {
    return await this.service.createMarketplaceSync({
      data: {
        ...data,

        marketplace: data.marketplace
          ? {
              connect: data.marketplace,
            }
          : undefined,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        externalId: true,
        id: true,

        marketplace: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketplaceSync] })
  @ApiNestedQuery(MarketplaceSyncFindManyArgs)
  async marketplaceSyncs(
    @common.Req() request: Request
  ): Promise<MarketplaceSync[]> {
    const args = plainToClass(MarketplaceSyncFindManyArgs, request.query);
    return this.service.marketplaceSyncs({
      ...args,
      select: {
        createdAt: true,
        externalId: true,
        id: true,

        marketplace: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketplaceSync(
    @common.Param() params: MarketplaceSyncWhereUniqueInput
  ): Promise<MarketplaceSync | null> {
    const result = await this.service.marketplaceSync({
      where: params,
      select: {
        createdAt: true,
        externalId: true,
        id: true,

        marketplace: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketplaceSync(
    @common.Param() params: MarketplaceSyncWhereUniqueInput,
    @common.Body() data: MarketplaceSyncUpdateInput
  ): Promise<MarketplaceSync | null> {
    try {
      return await this.service.updateMarketplaceSync({
        where: params,
        data: {
          ...data,

          marketplace: data.marketplace
            ? {
                connect: data.marketplace,
              }
            : undefined,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          externalId: true,
          id: true,

          marketplace: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketplaceSync })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketplaceSync(
    @common.Param() params: MarketplaceSyncWhereUniqueInput
  ): Promise<MarketplaceSync | null> {
    try {
      return await this.service.deleteMarketplaceSync({
        where: params,
        select: {
          createdAt: true,
          externalId: true,
          id: true,

          marketplace: {
            select: {
              id: true,
            },
          },

          product: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
