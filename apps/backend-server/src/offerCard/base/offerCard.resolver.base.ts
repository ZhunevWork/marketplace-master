/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OfferCard } from "./OfferCard";
import { OfferCardCountArgs } from "./OfferCardCountArgs";
import { OfferCardFindManyArgs } from "./OfferCardFindManyArgs";
import { OfferCardFindUniqueArgs } from "./OfferCardFindUniqueArgs";
import { CreateOfferCardArgs } from "./CreateOfferCardArgs";
import { UpdateOfferCardArgs } from "./UpdateOfferCardArgs";
import { DeleteOfferCardArgs } from "./DeleteOfferCardArgs";
import { Product } from "../../product/base/Product";
import { OfferCardService } from "../offerCard.service";
@graphql.Resolver(() => OfferCard)
export class OfferCardResolverBase {
  constructor(protected readonly service: OfferCardService) {}

  async _offerCardsMeta(
    @graphql.Args() args: OfferCardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OfferCard])
  async offerCards(
    @graphql.Args() args: OfferCardFindManyArgs
  ): Promise<OfferCard[]> {
    return this.service.offerCards(args);
  }

  @graphql.Query(() => OfferCard, { nullable: true })
  async offerCard(
    @graphql.Args() args: OfferCardFindUniqueArgs
  ): Promise<OfferCard | null> {
    const result = await this.service.offerCard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OfferCard)
  async createOfferCard(
    @graphql.Args() args: CreateOfferCardArgs
  ): Promise<OfferCard> {
    return await this.service.createOfferCard({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OfferCard)
  async updateOfferCard(
    @graphql.Args() args: UpdateOfferCardArgs
  ): Promise<OfferCard | null> {
    try {
      return await this.service.updateOfferCard({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OfferCard)
  async deleteOfferCard(
    @graphql.Args() args: DeleteOfferCardArgs
  ): Promise<OfferCard | null> {
    try {
      return await this.service.deleteOfferCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: OfferCard
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
